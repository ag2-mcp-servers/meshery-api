# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-29T05:06:20+00:00



import argparse
import json
import os
from typing import *
from typing import Optional
from uuid import UUID

from autogen.mcp.mcp_proxy import MCPProxy
from autogen.mcp.mcp_proxy.security import APIKeyCookie, BaseSecurity
from fastapi import Query, UploadFile

from models import (
    ApiProvidersGetResponse,
    ApiSystemAdapterManagePostResponse,
    ApiSystemAdaptersGetResponse,
    ApiSystemKubernetesContextsPostResponse,
    ApiSystemMeshsyncGrafanaGetResponse,
    ApiSystemMeshsyncPrometheusGetResponse,
    ApiTelemetryMetricsBoardsPostRequest,
    ApiTelemetryMetricsGrafanaBoardsGetResponse,
    ApiTelemetryMetricsGrafanaScanGetResponse,
    ApiTelemetryMetricsStaticBoardGetResponse,
    ApplicationsAPIResponse,
    FiltersAPIResponse,
    Grafana,
    GrafanaBoard,
    GrafanaConfigParams,
    K8SConfig,
    MesheryApplication,
    MesheryFilter,
    MesheryPattern,
    PatternsAPIResponse,
    PerformanceProfile,
    PerformanceProfileParameters,
    PerformanceProfilesAPIResponse,
    PerformanceResultsAPIResponse,
    PerformanceSpec,
    PerformanceTestConfig,
    Preference,
    Prometheus,
    Schedule,
    SchedulesAPIResponse,
    Version,
)

app = MCPProxy(
    description='the purpose of this application is to provide an application\nthat is using plain go code to define an API\n\nThis should demonstrate all the possible comment annotations\nthat are available to turn go code into a fully compliant swagger 2.0 spec',
    license={
        'name': 'Apache-2.0',
        'url': 'http://www.apache.org/licenses/LICENSE-2.0.txt',
    },
    title='Meshery API.',
    version='0.4.27',
    servers=[{'url': 'http://meshery.local'}, {'url': '/'}],
)


@app.get(
    '/api/application/',
    description=""" Returns requests for all Meshery Applications """,
    tags=['application_file_management', 'meshery_application_handling'],
    security=[
        APIKeyCookie(name="token"),
    ],
)
def id_get_application_file_request():
    """
    Handle GET request for Application Files
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/api/application/',
    description=""" Save attached Meshery Application File """,
    tags=['application_file_management'],
    security=[
        APIKeyCookie(name="token"),
    ],
)
def id_post_application_file_request():
    """
    Handle POST request for Application Files
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/api/application/deploy',
    description=""" Delete a deployed application file with the request """,
    tags=['application_file_management', 'meshery_application_handling'],
    security=[
        APIKeyCookie(name="token"),
    ],
)
def id_delete_application_file():
    """
    Handle DELETE request for Application File Deploy
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/api/application/deploy',
    description=""" Deploy an attached application file with the request """,
    tags=['application_file_management'],
    security=[
        APIKeyCookie(name="token"),
    ],
)
def id_post_deploy_application_file(file: UploadFile):
    """
    Handle POST request for Application File Deploy
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/api/application/{id}',
    description=""" Deletes a meshery application file with ID: id """,
    tags=['application_file_management', 'meshery_application_handling'],
    security=[
        APIKeyCookie(name="token"),
    ],
)
def id_delete_meshery_application_file(id: UUID):
    """
    Handle Delete for a Meshery Application File
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/application/{id}',
    description=""" Fetches the list of all applications saved by the current user """,
    tags=['meshery_application_handling'],
    security=[
        APIKeyCookie(name="token"),
    ],
)
def id_get_meshery_application(id: UUID):
    """
    Handle GET request for Meshery Application with the given id
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/filter',
    description=""" Returns all the Meshery Filters saved by the current user """,
    tags=['filter_file_management'],
    security=[
        APIKeyCookie(name="token"),
    ],
)
def id_get_filter_file():
    """
    Handle GET request for all filters
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/api/filter',
    description=""" Used to save/update a Meshery Filter """,
    tags=['filter_file_management', 'meshery_application_handling'],
    security=[
        APIKeyCookie(name="token"),
    ],
)
def id_post_filter_file():
    """
    Handle POST requests for Meshery Filters
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/filter/file/{id}',
    description=""" Returns the Meshery Filter file saved by the current user with the given id """,
    tags=['filter_file_management'],
    security=[
        APIKeyCookie(name="token"),
    ],
)
def id_get_filter_files(id: str):
    """
    Handle GET request for filter file with given id
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/api/filter/{id}',
    description=""" Deletes a meshery filter with ID: id """,
    tags=['meshery_application_handling', 'filter_file_management'],
    security=[
        APIKeyCookie(name="token"),
    ],
)
def id_delete_meshery_filter(id: UUID):
    """
    Handle Delete for a Meshery Filter
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/filter/{id}',
    description=""" Fetches the Meshery Filter with the given id """,
    tags=['meshery_application_handling', 'filter_file_management'],
    security=[
        APIKeyCookie(name="token"),
    ],
)
def id_get_meshery_filter(id: UUID):
    """
    Handle GET request for a Meshery Filter
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/oam/{type}',
    description=""" Getting list of workloads/traits/scopes

{type} being of either trait, scope, workload; registration of adapter capabilities. """,
    tags=['oam_pattern_management'],
    security=[
        APIKeyCookie(name="token"),
    ],
)
def id_g_e_t_o_a_m_meshery_pattern(type: str):
    """
    Handles the get requests for the OAM objects
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/api/oam/{type}',
    description=""" Adding a workload/trait/scope

{type} being of either trait, scope, workload; registration of adapter capabilities. """,
    tags=['oam_pattern_management'],
    security=[
        APIKeyCookie(name="token"),
    ],
)
def id_p_o_s_t_o_a_m_meshery_pattern(type: str):
    """
    Handles registering OMA objects
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/pattern',
    description=""" Returns the list of all the patterns saved by the current user
This will return all the patterns with their details """,
    tags=['oam_pattern_management', 'deploy_pattern_management'],
    security=[
        APIKeyCookie(name="token"),
    ],
)
def id_get_pattern_files():
    """
    Handle GET request for patterns
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/api/pattern',
    description=""" Edit/update a meshery pattern """,
    tags=['oam_pattern_management', 'deploy_pattern_management'],
    security=[
        APIKeyCookie(name="token"),
    ],
)
def id_post_pattern_file():
    """
    Handle POST requests for patterns
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/api/pattern/deploy',
    description=""" Delete a deployed pattern with the request """,
    tags=[
        'deploy_pattern_management',
        'application_file_management',
        'oam_pattern_management',
    ],
    security=[
        APIKeyCookie(name="token"),
    ],
)
def id_delete_deploy_pattern():
    """
    Handle DELETE request for Pattern Deploy
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/api/pattern/deploy',
    description=""" Deploy an attached pattern with the request """,
    tags=[
        'application_file_management',
        'deploy_pattern_management',
        'oam_pattern_management',
    ],
    security=[
        APIKeyCookie(name="token"),
    ],
)
def id_post_deploy_pattern(file: UploadFile):
    """
    Handle POST request for Pattern Deploy
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/api/pattern/{id}',
    description=""" Deletes a meshery pattern with ID: id """,
    tags=['oam_pattern_management', 'deploy_pattern_management'],
    security=[
        APIKeyCookie(name="token"),
    ],
)
def id_delete_meshery_pattern(id: UUID):
    """
    Handle Delete for a Meshery Pattern
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/pattern/{id}',
    description=""" Fetches the pattern with the given id """,
    tags=['oam_pattern_management', 'deploy_pattern_management'],
    security=[
        APIKeyCookie(name="token"),
    ],
)
def id_get_meshery_pattern(id: UUID):
    """
    Handle GET for a Meshery Pattern
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/perf/profile',
    description=""" Runs the load test with the given parameters """,
    tags=['performance_testing', 'load_preferences_management'],
    security=[
        APIKeyCookie(name="token"),
    ],
)
def id_run_perf_test(body: PerformanceTestConfig = None):
    """
    Handle GET request to run a test
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/perf/profile/result',
    description=""" Returns pages of all the perf results from Remote Provider """,
    tags=['performance_testing', 'performance_profile_management'],
    security=[
        APIKeyCookie(name="token"),
    ],
)
def id_get_all_perf_results():
    """
    Handles GET requests for perf results
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/perf/profile/result/{id}',
    description=""" Returns an individual result from provider """,
    tags=['performance_testing', 'performance_profile_management'],
    security=[
        APIKeyCookie(name="token"),
    ],
)
def id_get_single_perf_result(id: str):
    """
    Handles GET requests for perf result
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/provider',
    description=""" Update the choice of provider in system """,
    tags=['provider_management'],
    security=[
        APIKeyCookie(name="token"),
    ],
)
def id_choice_provider(provider: Optional[str] = None):
    """
    Handle GET request for the choice of provider
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/provider/capabilities',
    description=""" Returns the capabilities.json for the provider """,
    tags=['provider_management'],
    security=[
        APIKeyCookie(name="token"),
    ],
)
def id_get_provider_capabilities():
    """
    Handle GET requests for Provider
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/provider/extension',
    description=""" handles the requests to serve react components from the provider package """,
    tags=['application_file_management', 'meshery_application_handling'],
    security=[
        APIKeyCookie(name="token"),
    ],
)
def id_react_components():
    """
    Handle GET request for React Components
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/providers',
    description=""" Returns the available list of providers """,
    tags=['provider_management'],
    security=[
        APIKeyCookie(name="token"),
    ],
)
def id_get_providers_list():
    """
    Handle GET request for list of providers
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/api/system/adapter/manage',
    description=""" Used to delete adapter configuration """,
    tags=['adapter_configuration', 'application_file_management'],
    security=[
        APIKeyCookie(name="token"),
    ],
)
def id_delete_adapter_config(adapter: Optional[str] = None):
    """
    Handle DELETE requests to delete adapter config
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/api/system/adapter/manage',
    description=""" Used to persist adapter config """,
    tags=['adapter_configuration'],
    security=[
        APIKeyCookie(name="token"),
    ],
)
def id_post_adapter_config(body: str = None):
    """
    Handle POST requests to persist adapter config
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/api/system/adapter/operation',
    description=""" Used to send operations to the adapters """,
    tags=['adapter_configuration', 'application_file_management'],
    security=[
        APIKeyCookie(name="token"),
    ],
)
def id_post_adapter_operation(
    adapter: Optional[str] = None,
    query: Optional[str] = None,
    custom_body: Optional[str] = Query(None, alias='customBody'),
    namespace: Optional[str] = None,
    delete_op: Optional[str] = Query(None, alias='deleteOp'),
):
    """
    Handle POST requests for Adapter Operations
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/system/adapters',
    description=""" Fetches and returns all the adapters and ping adapters """,
    tags=['adapter_configuration', 'meshery_application_handling'],
    security=[
        APIKeyCookie(name="token"),
    ],
)
def id_get_system_adapters(adapter: Optional[str] = None):
    """
    Handle GET request for adapters
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/api/system/kubernetes',
    description=""" Used to delete kubernetes config to System """,
    tags=['kubernetes_operations'],
    security=[
        APIKeyCookie(name="token"),
    ],
)
def id_delete_k8_s_config():
    """
    Handle DELETE request for Kubernetes Config
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/api/system/kubernetes',
    description=""" Used to add kubernetes config to System """,
    tags=['kubernetes_operations', 'application_file_management'],
    security=[
        APIKeyCookie(name="token"),
    ],
)
def id_post_k8_s_config():
    """
    Handle POST request for Kubernetes Config
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/api/system/kubernetes/contexts',
    description=""" Returns the context list for a given k8s config """,
    tags=['kubernetes_operations'],
    security=[
        APIKeyCookie(name="token"),
    ],
)
def id_post_k8_s_contexts():
    """
    Handle POST requests for Kubernetes Context list
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/system/kubernetes/ping',
    description=""" Fetches server version to simulate ping """,
    tags=['kubernetes_operations', 'system_monitoring'],
    security=[
        APIKeyCookie(name="token"),
    ],
)
def id_get_kubernetes_ping():
    """
    Handle GET request for Kubernetes ping
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/system/meshsync/grafana',
    description=""" Fetches Prometheus and Grafana """,
    tags=['grafana_operations', 'meshery_application_handling'],
    security=[
        APIKeyCookie(name="token"),
    ],
)
def id_mesh_sync_grafana():
    """
    Handle GET request for mesh-sync grafana
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/system/meshsync/prometheus',
    description=""" Fetches Prometheus """,
    tags=['prometheus_operations'],
    security=[
        APIKeyCookie(name="token"),
    ],
)
def id_mesh_sync_prometheus():
    """
    Handle GET request for fetching prometheus
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/system/sync',
    description=""" Used to send session data to the UI for initial sync """,
    tags=[
        'application_file_management',
        'provider_management',
        'meshery_application_handling',
    ],
    security=[
        APIKeyCookie(name="token"),
    ],
)
def id_system_sync():
    """
    Handle GET request for config sync
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/system/version',
    description=""" Returns the running Meshery version """,
    tags=['system_monitoring'],
    security=[
        APIKeyCookie(name="token"),
    ],
)
def id_get_system_version():
    """
    Handle GET request for system/server version
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/api/telemetry/metrics/board_import',
    description=""" Used for importing Grafana board for Prometheus """,
    tags=['prometheus_operations', 'application_file_management'],
    security=[
        APIKeyCookie(name="token"),
    ],
)
def id_post_prometheus_board_import():
    """
    Handle POST request for Prometheus board import
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/api/telemetry/metrics/boards',
    description=""" Used to persist selected board and panels """,
    tags=['prometheus_operations'],
    security=[
        APIKeyCookie(name="token"),
    ],
)
def id_post_prometheus_board(body: ApiTelemetryMetricsBoardsPostRequest):
    """
    Handle POST request for Prometheus board
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/api/telemetry/metrics/config',
    description=""" Used for deleting Prometheus configuration """,
    tags=['prometheus_operations', 'adapter_configuration'],
    security=[
        APIKeyCookie(name="token"),
    ],
)
def id_delete_prometheus_config():
    """
    Handle DELETE for Prometheus configuration
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/telemetry/metrics/config',
    description=""" Used for fetching Prometheus configuration """,
    tags=['prometheus_operations'],
    security=[
        APIKeyCookie(name="token"),
    ],
)
def id_get_prometheus_config():
    """
    Handle GET for Prometheus configuration
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/api/telemetry/metrics/config',
    description=""" Used for persisting Prometheus configuration """,
    tags=['prometheus_operations', 'adapter_configuration'],
    security=[
        APIKeyCookie(name="token"),
    ],
)
def id_post_prometheus_config(body: str = None):
    """
    Handle POST for Prometheus configuration
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/telemetry/metrics/grafana/boards',
    description=""" Used for fetching Grafana boards and panels """,
    tags=['grafana_operations', 'prometheus_operations'],
    security=[
        APIKeyCookie(name="token"),
    ],
)
def id_get_grafana_boards(
    dashboard_search: Optional[str] = Query(None, alias='dashboardSearch')
):
    """
    Handle GET request for Grafana boards
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/api/telemetry/metrics/grafana/boards',
    description=""" Used for persist Grafana boards and panel selections """,
    tags=['grafana_operations', 'prometheus_operations'],
    security=[
        APIKeyCookie(name="token"),
    ],
)
def id_post_grafana_boards():
    """
    Handle POST request for Grafana boards
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/api/telemetry/metrics/grafana/config',
    description=""" Used for Delete Grafana configuration """,
    tags=['grafana_operations', 'adapter_configuration'],
    security=[
        APIKeyCookie(name="token"),
    ],
)
def id_delete_grafana_config():
    """
    Handle DELETE request for Grafana configuration
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/telemetry/metrics/grafana/config',
    description=""" Used for fetching Grafana configuration """,
    tags=['grafana_operations'],
    security=[
        APIKeyCookie(name="token"),
    ],
)
def id_get_grafana_config():
    """
    Handle GET request for Grafana configuration
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/api/telemetry/metrics/grafana/config',
    description=""" Used for persisting Grafana configuration """,
    tags=['grafana_operations'],
    security=[
        APIKeyCookie(name="token"),
    ],
)
def id_post_grafana_config(body: GrafanaConfigParams):
    """
    Handle POST request for Grafana configuration
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/telemetry/metrics/grafana/ping',
    description=""" Used to initiate a Grafana ping """,
    tags=['system_monitoring', 'grafana_operations'],
    security=[
        APIKeyCookie(name="token"),
    ],
)
def id_get_grafana_ping():
    """
    Handle GET request for Grafana ping
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/telemetry/metrics/grafana/query',
    description=""" Used for handling Grafana queries """,
    tags=['grafana_operations'],
    security=[
        APIKeyCookie(name="token"),
    ],
)
def id_get_grafana_query():
    """
    Handle GET request for Grafana queries
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/telemetry/metrics/grafana/scan',
    description=""" Fetches and returns Grafana """,
    tags=['grafana_operations'],
    security=[
        APIKeyCookie(name="token"),
    ],
)
def id_get_grafana():
    """
    Handle GET request for Grafana
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/telemetry/metrics/ping',
    description=""" Used to ping prometheus """,
    tags=['prometheus_operations', 'system_monitoring'],
    security=[
        APIKeyCookie(name="token"),
    ],
)
def id_get_prometheus_ping():
    """
    Handle GET request for Prometheus Ping
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/telemetry/metrics/query',
    description=""" Used to prometheus queries """,
    tags=['prometheus_operations'],
    security=[
        APIKeyCookie(name="token"),
    ],
)
def id_get_prometheus_query():
    """
    Handle GET request for Prometheus Query
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/telemetry/metrics/static-board',
    description=""" Used to fetch the static board """,
    tags=['prometheus_operations'],
    security=[
        APIKeyCookie(name="token"),
    ],
)
def id_get_prometheus_static_board():
    """
    Handle GET request for Prometheus static board
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/user/login',
    description=""" Redirects user for auth or issues session """,
    tags=['user_authentication'],
    security=[
        APIKeyCookie(name="token"),
    ],
)
def id_get_user_login():
    """
    Handlers GET request for User login
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/user/logout',
    description=""" Redirects user for auth or issues session """,
    tags=['user_authentication'],
    security=[
        APIKeyCookie(name="token"),
    ],
)
def id_get_user_logout():
    """
    Handlers GET request for User logout
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/user/performance/profiles',
    description=""" Returns the list of all the performance profiles saved by the current user """,
    tags=['performance_profile_management'],
    security=[
        APIKeyCookie(name="token"),
    ],
)
def id_get_performance_profiles():
    """
    Handle GET requests for performance profiles
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/api/user/performance/profiles',
    description=""" Save performance profile using the current provider's persistence mechanism """,
    tags=['performance_profile_management'],
    security=[
        APIKeyCookie(name="token"),
    ],
)
def id_save_performance_profile(body: PerformanceProfileParameters = None):
    """
    Handle POST requests for saving performance profile
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/user/performance/profiles/results',
    description=""" Returns pages of all the performance results from Remote Provider """,
    tags=['performance_testing', 'performance_profile_management'],
    security=[
        APIKeyCookie(name="token"),
    ],
)
def id_get_all_performance_results():
    """
    Handles GET requests for performance results
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/api/user/performance/profiles/{id}',
    description=""" Deletes a performance profile with the given id """,
    tags=['performance_profile_management', 'application_file_management'],
    security=[
        APIKeyCookie(name="token"),
    ],
)
def id_delete_performance_profile(id: UUID):
    """
    Handle Delete requests for performance profiles
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/user/performance/profiles/{id}',
    description=""" Returns single performance profile with the given id """,
    tags=['performance_testing', 'performance_profile_management'],
    security=[
        APIKeyCookie(name="token"),
    ],
)
def id_get_single_performance_profile(id: UUID):
    """
    Handle GET requests for performance results of a profile
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/user/performance/profiles/{id}/results',
    description=""" Fetchs pages of results from Remote Provider for the given id """,
    tags=['performance_profile_management', 'meshery_application_handling'],
    security=[
        APIKeyCookie(name="token"),
    ],
)
def id_g_e_t_profile_results(id: UUID):
    """
    Handle GET request for results of a profile
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/user/performance/profiles/{id}/run',
    description=""" Runs the load test with the given parameters """,
    tags=['performance_testing', 'user_load_test_preferences'],
    security=[
        APIKeyCookie(name="token"),
    ],
)
def id_run_performance_test(id: str):
    """
    Handle GET request to run a performance test
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/user/prefs',
    description=""" Returns User Load Test Preferences """,
    tags=['user_load_test_preferences', 'load_preferences_management'],
    security=[
        APIKeyCookie(name="token"),
    ],
)
def id_get_user_test_prefs():
    """
    Handle GET for User Load Test Preferences
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/api/user/prefs',
    description=""" Updates User Load Test Preferences """,
    tags=['user_load_test_preferences', 'load_preferences_management'],
    security=[
        APIKeyCookie(name="token"),
    ],
)
def id_post_user_test_prefs():
    """
    Handle GET for User Load Test Preferences
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/api/user/prefs/perf',
    description=""" Used for deleting load test preferences """,
    tags=['user_load_test_preferences', 'load_preferences_management'],
    security=[
        APIKeyCookie(name="token"),
    ],
)
def id_delete_load_preferences(uuid: Optional[UUID] = None):
    """
    Handle DELETE request for load test preferences
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/user/prefs/perf',
    description=""" Used for fetching load test preferences """,
    tags=['user_load_test_preferences', 'load_preferences_management'],
    security=[
        APIKeyCookie(name="token"),
    ],
)
def id_get_load_preferences(uuid: Optional[UUID] = None):
    """
    Handle GET request for load test preferences
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/api/user/prefs/perf',
    description=""" Used for persisting load test preferences """,
    tags=[
        'user_load_test_preferences',
        'load_preferences_management',
        'performance_testing',
    ],
    security=[
        APIKeyCookie(name="token"),
    ],
)
def id_post_load_preferences(body: PerformanceTestConfig = None):
    """
    Handle POST request for load test preferences
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/user/schedules',
    description=""" Returns the list of all the schedules saved by the current user """,
    tags=['schedules_management'],
    security=[
        APIKeyCookie(name="token"),
    ],
)
def id_get_schedules():
    """
    Handle GET reqeuest for Schedules
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/api/user/schedules',
    description=""" Save schedule using the current provider's persistence mechanism """,
    tags=['schedules_management'],
    security=[
        APIKeyCookie(name="token"),
    ],
)
def id_post_schedules():
    """
    Handle POST reqeuest for Schedules
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/api/user/schedules/{id}',
    description=""" Deletes a schedule with the given id """,
    tags=['schedules_management', 'application_file_management'],
    security=[
        APIKeyCookie(name="token"),
    ],
)
def id_delete_schedules(id: UUID):
    """
    Handle DELETE reqeuest for Schedules
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/user/schedules/{id}',
    description=""" Fetches and returns the schedule with the given id """,
    tags=['schedules_management'],
    security=[
        APIKeyCookie(name="token"),
    ],
)
def id_get_single_schedule(id: UUID):
    """
    Handle GET reqeuest for Schedules
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/user/token',
    description=""" Returns token from the actual provider in a file
resposese:
200: """,
    tags=['token_management'],
    security=[
        APIKeyCookie(name="token"),
    ],
)
def id_get_token_provider():
    """
    Handle GET request for tokens
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/api/user/token',
    description=""" Receives token from the actual provider
resposese:
200: """,
    tags=['token_management'],
    security=[
        APIKeyCookie(name="token"),
    ],
)
def id_post_token_provider():
    """
    Handle POST request for tokens
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/provider',
    description=""" Servers providers UI """,
    tags=['provider_management', 'provider_ui_access'],
    security=[
        APIKeyCookie(name="token"),
    ],
)
def id_provider():
    """
    Handle GET request to provider UI
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="MCP Server")
    parser.add_argument(
        "transport",
        choices=["stdio", "sse", "streamable-http"],
        help="Transport mode (stdio, sse or streamable-http)",
    )
    args = parser.parse_args()

    if "CONFIG_PATH" in os.environ:
        config_path = os.environ["CONFIG_PATH"]
        app.load_configuration(config_path)

    if "CONFIG" in os.environ:
        config = os.environ["CONFIG"]
        app.load_configuration_from_string(config)

    if "SECURITY" in os.environ:
        security_params = BaseSecurity.parse_security_parameters_from_env(
            os.environ,
        )

        app.set_security_params(security_params)

    mcp_settings = json.loads(os.environ.get("MCP_SETTINGS", "{}"))

    app.get_mcp(**mcp_settings).run(transport=args.transport)
